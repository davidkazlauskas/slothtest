(ns slothtest.core
  (:require [clojure.pprint :refer [write]]))

(defn- read-project-name-from-lein []
  (str (second (read-string (slurp "./project.clj")))))

(def ^:dynamic *notestns*
  (read-project-name-from-lein))

(defn- underscores-instead-dashes [the-str]
  (.replaceAll the-str "\\-" "_"))

(defn- test-path []
  (str "./test/" (underscores-instead-dashes *notestns*)
       "/autogen_test.clj"))

(defn- read-curr-test-src []
  (try
    (slurp (test-path))
    (catch Exception e
      (println "Could not read test file:" e)
      "")))

; 1 - namespace declaration
; 2 - the map of sterf
; 3 - the the deftest sucka
(defn- structure-test [the-struct]
  {:curr-tests (last (second the-struct))
   :testdef (last the-struct)})

(defn- gen-test-def [the-map]
  `(~'deftest ~'autogen
     (~'testing "Autogenerated"
       ~@(for [[func res] the-map]
          `(~'is (~'= ~(eval func) ~res))))))

(defn default-ns-decl [reqlist]
  `(~'ns ~(symbol (str *notestns* ".autogen_test"))
     (:require [clojure.test :refer :all]
               ~@reqlist)))

(defn- default-struct []
  ; TODO: no hardcoding
  {:curr-tests '{}
   :testdef (gen-test-def {})})

(defn- pull-namespaces [symb-list]
  (cond
    (nil? symb-list)
      #{}
    (or (vector? symb-list) (list? symb-list) (map? symb-list) (seq? symb-list))
      (into #{} (reduce concat (map pull-namespaces symb-list)))
    (symbol? symb-list)
      (if-let [the-n (namespace symb-list)]
        #{the-n}
        #{})
    :else
      #{}))

(defn- symbol-set [the-struct]
  (into #{}
   (reduce concat
    (for [[the-key the-val] (:curr-tests the-struct)]
      (-> #{}
        (into (pull-namespaces the-key))
        (into (pull-namespaces the-val)))))))

(defn- drop-nils-from-map [the-map]
  (into {} (filter second the-map)))

(defn- curr-test-struct []
  (merge
    (default-struct)
    (drop-nils-from-map
      (structure-test
        (read-string
          (str "(" (read-curr-test-src) ")"))))))

(defn- ppr [the-struct]
  (clojure.pprint/write
    the-struct :stream nil))

(defn gen-ns-decl [the-struct]
  (default-ns-decl
    (map
      #(vector (symbol %))
      (symbol-set the-struct))))

(defn- struct-to-source [the-struct]
  (clojure.string/join "\n\n"
                       [(ppr (gen-ns-decl the-struct))
                        (ppr `(def ~'test-data ~(:curr-tests the-struct)))
                        (ppr (gen-test-def (:curr-tests the-struct)))]))

(defn- save-struct [the-struct]
  (spit (test-path)
        (struct-to-source the-struct)))

(defn- add-test-expr [the-map func the-val]
  (assoc-in the-map [:curr-tests func] the-val))

(defn- remove-test-expr [the-map func]
  (assoc-in
    the-map [:curr-tests]
    (dissoc (:curr-tests the-map) func)))

(defn- ns-resolve-list [expr]
  (eval (read-string (str "`'" expr))))

(defn- save-specification [expr result]
  (clojure.java.io/make-parents (test-path))
  (save-struct
    (add-test-expr (curr-test-struct) expr result)))

; testing function namespace resolution
(defn rjames [x]
  (* 2 x))

(defn- drop-specification [expr]
  (save-struct
    (remove-test-expr (curr-test-struct) expr)))

(defmacro save-spec [the-expression]
  "Use this for simple evaluations with namespace resolution.
  Like: (save-spec (+ 1 2 3))
  "
  (save-specification
    (ns-resolve-list the-expression)
    `'~(eval (eval (ns-resolve-list the-expression)))))

(defmacro save-spec-sq
  "Use this for syntax quoted blocks (if you need locals and stuff)."
  [the-expression]
  (save-specification
    `'~(eval the-expression)
    `'~(eval (eval the-expression))))

(defmacro expand-spec-sq [the-expression]
  {:expression `'~(eval the-expression)
   :result `'~(eval (eval the-expression))})

(defmacro expand-spec [the-expression]
  {:expression (ns-resolve-list the-expression)
   :result `~(eval (ns-resolve-list the-expression))})

(defmacro expect-spec [the-expression result]
  (save-specification (ns-resolve-list the-expression) `'~result))

(defmacro remove-spec [the-expression]
  (drop-specification (ns-resolve-list the-expression)))

(defmacro slothtest-ns [new-namespace]
  `(def ^:dynamic *notestns* ~new-namespace))

(comment
  "Execute this test suite, generated sources should not be identical."

  (do
    (save-spec (+ 1 2 3 4))
    (save-spec (rjames 2))

    (save-spec (+ 1 2))
    (save-spec (* 1 2))
    (save-spec (/ 1 2))

    (save-spec-sq
      `(for [~'i [1 2 3]] (* 2 ~'i)))
    )
  )

(comment
  "Examples, evaluate for validation:"
  (=
   (expand-spec-sq
    `(for [~'i [1 2 3]] (* 2 ~'i)))
   {:expression
      '(clojure.core/for [i [1 2 3]]
        (clojure.core/* 2 i))
    :result '(2 4 6)})

  (=
   (expand-spec (rjames 4))
   {:expression '(slothtest.core/rjames 4)
    :result '8}))
